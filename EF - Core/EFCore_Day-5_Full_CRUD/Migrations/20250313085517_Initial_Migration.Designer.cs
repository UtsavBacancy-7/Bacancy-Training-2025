// <auto-generated />
using System;
using EFCore_Day_5_Full_CRUD.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCore_Day_5_Full_CRUD.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20250313085517_Initial_Migration")]
    partial class Initial_Migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EFCore_Day_5_Full_CRUD.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            DepartmentName = "IT"
                        },
                        new
                        {
                            DepartmentId = 2,
                            DepartmentName = "HR"
                        },
                        new
                        {
                            DepartmentId = 3,
                            DepartmentName = "Finance"
                        },
                        new
                        {
                            DepartmentId = 4,
                            DepartmentName = "Marketing"
                        },
                        new
                        {
                            DepartmentId = 5,
                            DepartmentName = "Operations"
                        });
                });

            modelBuilder.Entity("EFCore_Day_5_Full_CRUD.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            DepartmentId = 1,
                            Email = "alice@company.com",
                            Name = "Alice Johnson"
                        },
                        new
                        {
                            EmployeeId = 2,
                            DepartmentId = 1,
                            Email = "bob@company.com",
                            Name = "Bob Smith"
                        },
                        new
                        {
                            EmployeeId = 3,
                            DepartmentId = 2,
                            Email = "charlie@company.com",
                            Name = "Charlie Brown"
                        },
                        new
                        {
                            EmployeeId = 4,
                            DepartmentId = 3,
                            Email = "david@company.com",
                            Name = "David Wilson"
                        },
                        new
                        {
                            EmployeeId = 5,
                            DepartmentId = 2,
                            Email = "eve@company.com",
                            Name = "Eve Adams"
                        },
                        new
                        {
                            EmployeeId = 6,
                            DepartmentId = 4,
                            Email = "frank@company.com",
                            Name = "Frank Thomas"
                        },
                        new
                        {
                            EmployeeId = 7,
                            DepartmentId = 5,
                            Email = "grace@company.com",
                            Name = "Grace Lee"
                        },
                        new
                        {
                            EmployeeId = 8,
                            DepartmentId = 3,
                            Email = "henry@company.com",
                            Name = "Henry Clark"
                        },
                        new
                        {
                            EmployeeId = 9,
                            DepartmentId = 1,
                            Email = "isabella@company.com",
                            Name = "Isabella Moore"
                        },
                        new
                        {
                            EmployeeId = 10,
                            DepartmentId = 4,
                            Email = "jack@company.com",
                            Name = "Jack White"
                        });
                });

            modelBuilder.Entity("EFCore_Day_5_Full_CRUD.Models.EmployeeProject", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("EmployeeId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("EmployeeProjects");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            ProjectId = 1,
                            Role = "Lead Developer"
                        },
                        new
                        {
                            EmployeeId = 2,
                            ProjectId = 1,
                            Role = "DevOps Engineer"
                        },
                        new
                        {
                            EmployeeId = 3,
                            ProjectId = 2,
                            Role = "Project Manager"
                        },
                        new
                        {
                            EmployeeId = 4,
                            ProjectId = 3,
                            Role = "Financial Analyst"
                        },
                        new
                        {
                            EmployeeId = 5,
                            ProjectId = 2,
                            Role = "HR Consultant"
                        },
                        new
                        {
                            EmployeeId = 1,
                            ProjectId = 2,
                            Role = "Full Stack Developer"
                        },
                        new
                        {
                            EmployeeId = 3,
                            ProjectId = 3,
                            Role = "Data Scientist"
                        },
                        new
                        {
                            EmployeeId = 4,
                            ProjectId = 1,
                            Role = "Tester"
                        },
                        new
                        {
                            EmployeeId = 2,
                            ProjectId = 3,
                            Role = "Backend Engineer"
                        },
                        new
                        {
                            EmployeeId = 6,
                            ProjectId = 4,
                            Role = "Marketing Specialist"
                        },
                        new
                        {
                            EmployeeId = 7,
                            ProjectId = 5,
                            Role = "Operations Manager"
                        },
                        new
                        {
                            EmployeeId = 8,
                            ProjectId = 6,
                            Role = "Business Analyst"
                        },
                        new
                        {
                            EmployeeId = 9,
                            ProjectId = 4,
                            Role = "Frontend Developer"
                        },
                        new
                        {
                            EmployeeId = 10,
                            ProjectId = 5,
                            Role = "UI/UX Designer"
                        },
                        new
                        {
                            EmployeeId = 5,
                            ProjectId = 6,
                            Role = "Scrum Master"
                        });
                });

            modelBuilder.Entity("EFCore_Day_5_Full_CRUD.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("ProjectId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            ProjectName = "Cloud Migration",
                            StartDate = new DateOnly(2023, 6, 1)
                        },
                        new
                        {
                            ProjectId = 2,
                            ProjectName = "E-commerce Platform",
                            StartDate = new DateOnly(2023, 7, 15)
                        },
                        new
                        {
                            ProjectId = 3,
                            ProjectName = "AI Chatbot",
                            StartDate = new DateOnly(2023, 9, 10)
                        },
                        new
                        {
                            ProjectId = 4,
                            ProjectName = "Data Analytics Dashboard",
                            StartDate = new DateOnly(2023, 10, 5)
                        },
                        new
                        {
                            ProjectId = 5,
                            ProjectName = "CRM System",
                            StartDate = new DateOnly(2024, 1, 20)
                        },
                        new
                        {
                            ProjectId = 6,
                            ProjectName = "ERP Upgrade",
                            StartDate = new DateOnly(2024, 3, 12)
                        });
                });

            modelBuilder.Entity("EFCore_Day_5_Full_CRUD.Models.Employee", b =>
                {
                    b.HasOne("EFCore_Day_5_Full_CRUD.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EFCore_Day_5_Full_CRUD.Models.EmployeeProject", b =>
                {
                    b.HasOne("EFCore_Day_5_Full_CRUD.Models.Employee", "Employee")
                        .WithMany("EmployeeProjects")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCore_Day_5_Full_CRUD.Models.Project", "Project")
                        .WithMany("EmployeeProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("EFCore_Day_5_Full_CRUD.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("EFCore_Day_5_Full_CRUD.Models.Employee", b =>
                {
                    b.Navigation("EmployeeProjects");
                });

            modelBuilder.Entity("EFCore_Day_5_Full_CRUD.Models.Project", b =>
                {
                    b.Navigation("EmployeeProjects");
                });
#pragma warning restore 612, 618
        }
    }
}
