// <auto-generated />
using System;
using EFCore_Day_4_Loading_Types.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCore_Day_4_Loading_Types.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EFCore_Day_4_Loading_Types.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsVIP")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Email = "jay@gmail.com",
                            IsVIP = true,
                            Name = "Jay"
                        },
                        new
                        {
                            CustomerId = 2,
                            Email = "mahesh@gmail.com",
                            IsVIP = false,
                            Name = "Mahesh"
                        },
                        new
                        {
                            CustomerId = 3,
                            Email = "raju@gmail.com",
                            IsVIP = true,
                            Name = "Raju"
                        },
                        new
                        {
                            CustomerId = 4,
                            Email = "mukesh@gmail.com",
                            IsVIP = false,
                            Name = "Mukesh"
                        },
                        new
                        {
                            CustomerId = 5,
                            Email = "suresh@gmail.com",
                            IsVIP = true,
                            Name = "Suresh"
                        });
                });

            modelBuilder.Entity("EFCore_Day_4_Loading_Types.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            CustomerId = 1,
                            IsDeleted = false,
                            OrderDate = new DateTime(2023, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderId = 2,
                            CustomerId = 2,
                            IsDeleted = false,
                            OrderDate = new DateTime(2023, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderId = 3,
                            CustomerId = 3,
                            IsDeleted = false,
                            OrderDate = new DateTime(2023, 12, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderId = 4,
                            CustomerId = 1,
                            IsDeleted = false,
                            OrderDate = new DateTime(2023, 12, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderId = 5,
                            CustomerId = 4,
                            IsDeleted = false,
                            OrderDate = new DateTime(2023, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderId = 6,
                            CustomerId = 2,
                            IsDeleted = false,
                            OrderDate = new DateTime(2023, 12, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderId = 7,
                            CustomerId = 3,
                            IsDeleted = false,
                            OrderDate = new DateTime(2023, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderId = 8,
                            CustomerId = 5,
                            IsDeleted = false,
                            OrderDate = new DateTime(2023, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EFCore_Day_4_Loading_Types.Models.OrderProduct", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("orderProducts");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            ProductId = 1,
                            Id = 1,
                            Quantity = 1
                        },
                        new
                        {
                            OrderId = 2,
                            ProductId = 2,
                            Id = 2,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 3,
                            ProductId = 3,
                            Id = 3,
                            Quantity = 1
                        },
                        new
                        {
                            OrderId = 4,
                            ProductId = 4,
                            Id = 4,
                            Quantity = 3
                        },
                        new
                        {
                            OrderId = 5,
                            ProductId = 5,
                            Id = 5,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 6,
                            ProductId = 6,
                            Id = 6,
                            Quantity = 1
                        },
                        new
                        {
                            OrderId = 7,
                            ProductId = 7,
                            Id = 7,
                            Quantity = 4
                        },
                        new
                        {
                            OrderId = 8,
                            ProductId = 8,
                            Id = 8,
                            Quantity = 2
                        });
                });

            modelBuilder.Entity("EFCore_Day_4_Loading_Types.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Laptop",
                            Price = 49999.00m,
                            Stock = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Smartphone",
                            Price = 29999.00m,
                            Stock = 25
                        },
                        new
                        {
                            Id = 3,
                            Name = "Headphones",
                            Price = 1999.99m,
                            Stock = 10
                        },
                        new
                        {
                            Id = 4,
                            Name = "Keyboard",
                            Price = 1499.50m,
                            Stock = 15
                        },
                        new
                        {
                            Id = 5,
                            Name = "Mouse",
                            Price = 799.75m,
                            Stock = 20
                        },
                        new
                        {
                            Id = 6,
                            Name = "Monitor",
                            Price = 8999.99m,
                            Stock = 7
                        },
                        new
                        {
                            Id = 7,
                            Name = "Printer",
                            Price = 12999.00m,
                            Stock = 3
                        },
                        new
                        {
                            Id = 8,
                            Name = "Speaker",
                            Price = 2999.49m,
                            Stock = 120
                        },
                        new
                        {
                            Id = 9,
                            Name = "Webcam",
                            Price = 2499.99m,
                            Stock = 18
                        },
                        new
                        {
                            Id = 10,
                            Name = "External Hard Drive",
                            Price = 6999.99m,
                            Stock = 6
                        });
                });

            modelBuilder.Entity("EFCore_Day_4_Loading_Types.Models.Order", b =>
                {
                    b.HasOne("EFCore_Day_4_Loading_Types.Models.Customer", "customer")
                        .WithMany("orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");
                });

            modelBuilder.Entity("EFCore_Day_4_Loading_Types.Models.OrderProduct", b =>
                {
                    b.HasOne("EFCore_Day_4_Loading_Types.Models.Order", "orders")
                        .WithMany("orderProduct")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCore_Day_4_Loading_Types.Models.Product", "products")
                        .WithMany("orderProduct")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("orders");

                    b.Navigation("products");
                });

            modelBuilder.Entity("EFCore_Day_4_Loading_Types.Models.Customer", b =>
                {
                    b.Navigation("orders");
                });

            modelBuilder.Entity("EFCore_Day_4_Loading_Types.Models.Order", b =>
                {
                    b.Navigation("orderProduct");
                });

            modelBuilder.Entity("EFCore_Day_4_Loading_Types.Models.Product", b =>
                {
                    b.Navigation("orderProduct");
                });
#pragma warning restore 612, 618
        }
    }
}
